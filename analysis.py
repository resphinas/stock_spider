import re
import os,sys
import jieba
import numpy as np
import os

from wordcloud import WordCloud
#1.读取文本内容
# 打开词典文件，返回列表
def open_dict(Dict,path = r'E:\2022年\日常工作\20220414股吧舆情分析'):
    path = path + '\%s.txt' %Dict
    dictionary = open(f'{Dict}.txt', 'r', encoding='utf-8')
    dict = []
    for word in dictionary:
        word = word.strip('\n')
        dict.append(word)
    return dict

def judgeodd(num):
    if num % 2 == 0:
        return 'even'
    else:
        return 'odd'
deny_word = open_dict(Dict='否定词')
posdict = open_dict(Dict='positive')
negdict = open_dict(Dict = 'negative')

degree_word = open_dict(Dict = '程度级别词语',path=r'E:\2022年\日常工作\20220414股吧舆情分析')
print(degree_word)
mostdict = degree_word[degree_word.index('extreme')+1: degree_word.index('very')] #权重4，即在情感前乘以3
verydict = degree_word[degree_word.index('very')+1: degree_word.index('more')] #权重3
moredict = degree_word[degree_word.index('more')+1: degree_word.index('ish')]#权重2
ishdict = degree_word[degree_word.index('ish')+1: degree_word.index('last')]#权重0.5

def sentiment_score_list(dataset):

    seg_sentence = dataset

    count1 = []
    count2 = []
    global mm
    mm = ""
    for sen in seg_sentence: # 循环遍历每一个评论
        mm += sen
        segtmp = jieba.lcut(sen, cut_all=False) # 把句子进行分词，以列表的形式返回
        i = 0 #记录扫描到的词的位置
        a = 0 #记录情感词的位置
        poscount = 0 # 积极词的第一次分值
        poscount2 = 0 # 积极反转后的分值
        poscount3 = 0 # 积极词的最后分值（包括叹号的分值）
        negcount = 0
        negcount2 = 0
        negcount3 = 0
        for word in segtmp:
            if word in posdict: # 判断词语是否是情感词
                poscount +=1
                c = 0
                for w in segtmp[a:i]: # 扫描情感词前的程度词
                    if w in mostdict:
                        poscount *= 4.0
                    elif w in verydict:
                        poscount *= 3.0
                    elif w in moredict:
                       poscount *= 2.0
                    elif w in ishdict:
                        poscount *= 0.5
                    elif w in deny_word: c+= 1
                if judgeodd(c) == 'odd': # 扫描情感词前的否定词数
                    poscount *= -1.0
                    poscount2 += poscount
                    poscount = 0
                    poscount3 = poscount + poscount2 + poscount3
                    poscount2 = 0
                else:
                    poscount3 = poscount + poscount2 + poscount3
                    poscount = 0
                a = i+1
            elif word in negdict: # 消极情感的分析，与上面一致
                negcount += 1
                d = 0
                for w in segtmp[a:i]:
                    if w in mostdict:
                        negcount *= 4.0
                    elif w in verydict:
                        negcount *= 3.0
                    elif w in moredict:
                        negcount *= 2.0
                    elif w in ishdict:
                        negcount *= 0.5
                    elif w in degree_word:
                        d += 1
                if judgeodd(d) == 'odd':
                    negcount *= -1.0
                    negcount2 += negcount
                    negcount = 0
                    negcount3 = negcount + negcount2 + negcount3
                    negcount2 = 0
                else:
                    negcount3 = negcount + negcount2 + negcount3
                    negcount = 0
                a = i + 1
            elif word == '！' or word == '!': # 判断句子是否有感叹号
                for w2 in segtmp[::-1]: # 扫描感叹号前的情感词，发现后权值+2，然后退出循环
                    if w2 in posdict or negdict:
                        poscount3 += 2
                        negcount3 += 2
                        break
            i += 1

            # 以下是防止出现负数的情况
            pos_count = 0
            neg_count = 0
            if poscount3 <0 and negcount3 > 0:
                neg_count += negcount3 - poscount3
                pos_count = 0
            elif negcount3 <0 and poscount3 > 0:
                pos_count = poscount3 - negcount3
                neg_count = 0
            elif poscount3 <0 and negcount3 < 0:
                neg_count = -pos_count
                pos_count = -neg_count
            else:
                pos_count = poscount3
                neg_count = negcount3
            count1.append([pos_count,neg_count])
        count2.append(count1)
        count1=[]

    return count2

def sentiment_score(senti_score_list):
    score = []
    for review in senti_score_list:
        score_array =  np.array(review)
        Pos = np.sum(score_array[:,0])
        Neg = np.sum(score_array[:,1])
        AvgPos = np.mean(score_array[:,0])
        AvgPos = float('%.lf' % AvgPos)
        AvgNeg = np.mean(score_array[:, 1])
        AvgNeg = float('%.1f' % AvgNeg)
        StdPos = np.std(score_array[:, 0])
        StdPos = float('%.1f' % StdPos)
        StdNeg = np.std(score_array[:, 1])
        StdNeg = float('%.1f' % StdNeg)
        score.append([Pos,Neg,AvgPos,AvgNeg,StdPos,StdNeg])
    return score
files = os.listdir('./')
negnumlist = []
posnumlist = []
all_set = {}
flag = 0
mm=""
for file in files:
    print(f'当前日期:{file}')
    if '.txt' in file:
        cupos = 0
        cuneg = 0
        numi = 0
        with open(file,'r',encoding='gbk') as file0:
            file = file.replace('.txt', '')
            try:
                content = file0.readlines()
            except:
                break
            need = []
            for i in content:
                i = i.replace('\n','')
                need.append(i)
            a = sentiment_score(sentiment_score_list(need))
            # print(a)
            for i in a:
                numi +=1
                cupos += i[0]
                cuneg += i[1]
            if file not in all_set:
                all_set[file] = [0,0,0]
                all_set[file][0] += cupos
                all_set[file][1] += cuneg
                all_set[file][2] += numi
            else:
                all_set[file][0] += cupos
                all_set[file][1] += cuneg
                all_set[file][2] += numi
    print(all_set)
with open('result.txt','w',encoding='utf-8') as file2:
    file2.write(str(all_set)+'\n')
    print(all_set)
    input()

input('dddd')
need = {'01_02': [176.0, 158.0, 33], '01_03': [442.0, 328.0, 75], '01_04': [279, 35, 42], '01_05': [33, 0, 2], '01_06': [1371.5, 3656.0, 576], '01_07': [274.0, 618.0, 103], '01_08': [1183.0, 2514.0, 455], '01_09': [720.0, 1233.0, 292], '01_11': [340.0, 398.0, 122], '01_12': [377.0, 639.0, 196], '01_13': [605.0, 975.0, 267], '01_14': [1232.0, 1610.0, 393], '01_15': [182.0, 277.0, 77], '01_16': [12.0, 58.0, 23], '01_17': [1126.0, 1375.0, 367], '01_18': [546.0, 632.0, 237], '01_19': [461.0, 439.0, 174], '01_20': [364.0, 268.0, 118], '01_21': [93.0, 67.0, 30], '01_22': [87.0, 63.0, 28], '01_24': [0, 2, 1], '01_25': [446.0, 291.0, 115], '01_26': [176.0, 102.0, 39], '01_27': [426.0, 330.0, 116], '01_28': [195.0, 186.0, 40], '02_07': [38.0, 155.0, 15], '02_10': [128.0, 179.0, 58], '02_11': [256.0, 346.0, 113], '02_14': [128.0, 173.0, 55], '02_15': [256.0, 346.0, 107], '02_17': [390.0, 456.0, 153], '02_18': [524.0, 558.0, 190], '02_21': [131.0, 138.0, 45], '02_22': [480.0, 503.0, 170], '02_23': [468.0, 443.0, 154], '02_24': [707.0, 638.0, 231], '02_25': [315.0, 344.0, 110], '02_27': [156.0, 172.0, 49], '02_28': [504.0, 1058.0, 240], '03_01': [90.0, 118.0, 30], '03_02': [24, 7, 6], '03_03': [1436.0, 2793.0, 363], '03_04': [810.0, 1706.0, 222], '03_05': [692.0, 1601.0, 206], '03_07': [1243.0, 2775.0, 364], '03_08': [1148.0, 1934.0, 300], '03_09': [411.0, 698.0, 126], '03_10': [782.0, 1165.0, 245], '03_12': [73.0, 101.0, 19], '03_14': [185.0, 279.0, 51], '03_15': [236.0, 381.0, 65], '03_16': [160.0, 218.0, 34], '03_18': [153, 110, 21], '03_22': [200.0, 134.5, 61], '03_23': [546.0, 376.5, 177], '03_24': [1230.0, 878.5, 378], '03_25': [612.0, 498.0, 194], '03_28': [153.0, 124.5, 46], '03_29': [622.0, 498.0, 174], '03_30': [920.0, 707.0, 231], '03_31': [9092.0, 4989.5, 1421], '04_01': [1467.0, 757.0, 178], '04_02': [914.0, 484.0, 105], '04_03': [28.0, 14.0, 5], '04_04': [389.0, 242.0, 51], '04_06': [1153.0, 737.0, 151], '04_08': [1783.0, 1210.0, 225], '04_10': [614.0, 484.0, 83], '04_11': [264.0, 242.0, 40], '04_14': [5551.0, 3961.0, 786], '09_03': [6324.0, 2375.0, 1102], '09_05': [550.0, 222.0, 95], '09_06': [3301.0, 1669.0, 646], '09_07': [612, 492, 159], '09_08': [204, 160, 45], '09_09': [552, 530, 126], '09_10': [148, 128, 27], '09_13': [106, 100, 23], '09_15': [164, 152, 34], '09_16': [525.0, 883.0, 130], '09_24': [209.0, 432.0, 53], '09_27': [831.0, 1668.0, 202], '09_29': [180.0, 409.0, 48], '10_04': [513.0, 1211.0, 138], '10_09': [936.0, 3415.0, 360], '10_10': [645.0, 2328.0, 224], '10_11': [817.0, 2277.0, 270], '10_12': [448.0, 933.0, 100], '10_13': [156, 273, 21], '10_15': [73, 140, 9], '10_16': [33, 11, 3], '10_17': [33, 11, 2], '10_22': [246.0, 356.0, 59], '10_28': [33, 5, 1], '11_02': [246.0, 355.0, 58], '11_04': [202.0, 328.0, 57], '11_08': [594.0, 982.0, 165], '11_09': [198.0, 327.0, 53], '11_10': [198.0, 327.0, 52], '11_11': [594.0, 950.0, 150], '11_12': [332.0, 564.0, 95], '11_13': [136.0, 262.0, 46], '11_14': [378.0, 754.0, 132], '11_15': [318.0, 649.0, 123], '11_16': [424.0, 722.0, 150], '11_17': [399.0, 646.0, 134], '11_18': [1076.0, 1393.0, 405], '11_19': [321.0, 219.0, 88], '11_20': [2995.0, 4414.0, 1333], '11_21': [12672.0, 16233.0, 4612], '11_22': [29636.0, 37179.0, 5125], '11_23': [11361.5, 22543.5, 2765], '11_24': [7666.0, 14611.0, 1395], '11_25': [2912.0, 7027.0, 418], '11_26': [8251.0, 10761.0, 1113], '11_27': [5194.0, 5634.0, 616], '11_28': [4270.0, 4604.0, 495], '11_29': [4653.0, 4506.0, 660], '11_30': [7598.0, 8228.0, 1079], '12_01': [4072.0, 4211.0, 513], '12_02': [7719.0, 6839.0, 882], '12_03': [2817.0, 1590.0, 405], '12_04': [452.0, 318.0, 90], '12_05': [5239.0, 9128.0, 847], '12_06': [7129.0, 14853.0, 1177], '12_07': [2227.0, 5184.0, 375], '12_08': [2724.0, 8252.0, 450], '12_09': [4115.0, 5820.0, 603], '12_10': [26402.0, 29006.0, 2553], '12_11': [10996.0, 10680.0, 1067], '12_12': [2628.0, 2867.0, 280], '12_13': [3248.0, 3831.0, 350], '12_14': [1418.0, 1516.0, 220], '12_15': [6088.0, 6187.0, 708], '12_16': [1148.0, 949.0, 87], '12_17': [638.0, 1617.0, 270], '12_18': [973.0, 3616.0, 671], '12_19': [298.0, 3098.0, 594], '12_20': [-200.0, 855.0, 205], '12_21': [-646.0, 1471.0, 335], '12_22': [751.0, 1449.0, 301], '12_23': [303.0, 322.0, 77], '12_24': [46.0, 92.0, 28], '12_25': [776.0, 796.0, 137], '12_27': [1552.0, 1560.0, 262], '12_28': [4741.0, 4581.0, 741], '12_29': [3333.0, 3358.0, 534], '12_30': [4017.0, 3749.0, 531], '12_31': [246.0, 328.0, 57]}
add = ["2021-10-22,14.440,14.420,14.560,14.360,518000,7489909.000,1.38,-0.55,-0.080,0.04","2021-10-25,14.320,14.180,14.400,14.140,1034800,14732819.000,1.80,-1.66,-0.240,0.08","2021-10-26,14.180,14.120,14.260,13.960,1000700,14105934.000,2.12,-0.42,-0.060,0.08","2021-10-27,13.980,13.900,14.240,13.880,854500,11952213.000,2.55,-1.56,-0.220,0.07","2021-10-28,13.920,13.660,14.120,13.500,1232600,16864092.000,4.46,-1.73,-0.240,0.10","2021-10-29,13.780,13.680,13.780,13.440,839900,11411525.000,2.49,0.15,0.020,0.07","2021-11-01,13.620,13.420,13.680,13.300,1482502,19857412.000,2.78,-1.90,-0.260,0.12","2021-11-02,13.580,13.120,13.700,13.060,1714000,22857959.000,4.77,-2.24,-0.300,0.13","2021-11-03,13.120,13.280,13.500,13.120,750200,9952409.000,2.90,1.22,0.160,0.06","2021-11-04,13.300,13.240,13.360,13.060,1171800,15456849.000,2.26,-0.30,-0.040,0.09","2021-11-05,13.240,12.720,13.240,12.580,3095437,39584614.000,4.98,-3.93,-0.520,0.24","2021-11-08,12.720,12.800,13.080,12.540,3563000,45681909.000,4.25,0.63,0.080,0.28","2021-11-09,12.920,12.660,12.960,12.580,1836300,23304686.000,2.97,-1.09,-0.140,0.14","2021-11-10,12.700,12.840,12.860,12.440,1896000,23864688.000,3.32,1.42,0.180,0.15","2021-11-11,12.840,13.480,13.520,12.760,3403400,45090598.000,5.92,4.98,0.640,0.27","2021-11-12,13.580,13.240,13.580,13.100,1226200,16218366.000,3.56,-1.78,-0.240,0.10","2021-11-15,13.320,12.980,13.320,12.900,747600,9735216.000,3.17,-1.96,-0.260,0.06","2021-11-16,12.980,13.080,13.240,12.900,918200,12022821.000,2.62,0.77,0.100,0.07","2021-11-17,13.020,13.020,13.060,12.760,584100,7544810.000,2.29,-0.46,-0.060,0.05","2021-11-18,12.880,12.800,12.920,12.720,690484,8837264.000,1.54,-1.69,-0.220,0.05","2021-11-19,12.680,12.880,12.920,12.640,560728,7169157.000,2.19,0.63,0.080,0.04","2021-11-22,12.740,12.380,12.740,12.320,2704800,33707320.000,3.26,-3.88,-0.500,0.21","2021-11-23,12.320,12.740,12.840,12.300,1267800,16053216.000,4.36,2.91,0.360,0.10","2021-11-24,12.660,12.480,12.800,12.420,940100,11783199.000,2.98,-2.04,-0.260,0.07","2021-11-25,12.480,12.580,12.620,12.360,865303,10825277.000,2.08,0.80,0.100,0.07","2021-11-26,12.580,12.160,12.580,12.140,1449700,17794996.000,3.50,-3.34,-0.420,0.11","2021-11-29,12.180,12.340,12.340,12.020,1258600,15405578.000,2.63,1.48,0.180,0.10","2021-11-30,12.340,12.300,12.540,12.120,1365700,16777179.000,3.40,-0.32,-0.040,0.11","2021-12-01,12.260,12.440,12.540,12.200,1112456,13820342.000,2.76,1.14,0.140,0.09","2021-12-02,12.400,12.200,12.400,12.140,1325900,16199578.000,2.09,-1.93,-0.240,0.10","2021-12-03,12.160,12.240,12.420,12.120,1683200,20582897.000,2.46,0.33,0.040,0.13","2021-12-06,12.080,11.940,12.160,11.820,1320618,15831660.000,2.78,-2.45,-0.300,0.10","2021-12-07,11.980,12.140,12.260,11.920,1178740,14298743.000,2.85,1.68,0.200,0.09","2021-12-08,12.180,12.100,12.500,12.060,1037400,12706297.000,3.62,-0.33,-0.040,0.08","2021-12-09,12.300,12.520,12.580,12.200,1498200,18716484.000,3.14,3.47,0.420,0.12","2021-12-10,12.500,12.260,12.560,12.200,888000,10924690.000,2.88,-2.08,-0.260,0.07","2021-12-13,12.440,12.220,12.540,12.180,1245300,15371962.000,2.94,-0.33,-0.040,0.10","2021-12-14,12.140,11.820,12.260,11.760,1547800,18543844.000,4.09,-3.27,-0.400,0.12","2021-12-15,11.860,12.040,12.240,11.740,1122500,13525204.000,4.23,1.86,0.220,0.09","2021-12-16,12.080,12.000,12.080,11.900,1032346,12373003.000,1.50,-0.33,-0.040,0.08","2021-12-17,12.000,11.920,12.040,11.860,1722181,20574879.000,1.50,-0.67,-0.080,0.14","2021-12-20,11.880,11.600,11.920,11.600,1474700,17254072.000,2.68,-2.68,-0.320,0.12","2021-12-21,11.640,12.020,12.080,11.620,1569400,18623942.000,3.97,3.62,0.420,0.12","2021-12-22,12.140,12.040,12.160,11.900,1227142,14733681.000,2.16,0.17,0.020,0.10","2021-12-23,12.040,12.140,12.200,12.000,476100,5769762.000,1.66,0.83,0.100,0.04","2021-12-24,12.200,12.200,12.220,12.060,307600,3735804.000,1.32,0.49,0.060,0.02","2021-12-28,12.240,11.960,12.240,11.920,1157752,13933747.000,2.62,-1.97,-0.240,0.09","2021-12-29,11.940,11.780,11.940,11.740,231400,2737239.000,1.67,-1.51,-0.180,0.02","2021-12-30,11.780,11.580,11.820,11.500,563000,6531882.000,2.72,-1.70,-0.200,0.04","2021-12-31,11.640,11.520,11.760,11.520,455500,5292780.000,2.07,-0.52,-0.060,0.04","2022-01-03,11.500,11.520,11.740,11.500,318800,3682783.000,2.08,0.00,0.000,0.03","2022-01-04,11.620,11.780,11.840,11.560,1231499,14436862.000,2.43,2.26,0.260,0.10","2022-01-05,11.780,11.780,12.080,11.700,1093900,12907565.000,3.23,0.00,0.000,0.09","2022-01-06,11.780,11.720,11.960,11.540,1156700,13504744.000,3.57,-0.51,-0.060,0.09","2022-01-07,11.740,11.920,11.960,11.620,1213698,14308530.000,2.90,1.71,0.200,0.10","2022-01-10,12.020,12.040,12.040,11.820,1029900,12282963.000,1.85,1.01,0.120,0.08","2022-01-11,12.120,12.060,12.180,11.980,1225600,14820297.000,1.66,0.17,0.020,0.10","2022-01-12,12.140,12.200,12.300,12.080,842600,10257582.000,1.82,1.16,0.140,0.07","2022-01-13,12.160,12.060,12.240,11.960,1000300,12086282.000,2.30,-1.15,-0.140,0.08","2022-01-14,11.980,11.740,11.980,11.640,1687634,19812132.000,2.82,-2.65,-0.320,0.13","2022-01-17,11.780,11.780,11.940,11.620,959700,11260848.000,2.73,0.34,0.040,0.08","2022-01-18,11.820,11.760,11.920,11.700,681400,8044460.000,1.87,-0.17,-0.020,0.05","2022-01-19,11.800,11.680,11.880,11.580,2740300,31984567.000,2.55,-0.68,-0.080,0.22","2022-01-20,11.780,12.000,12.080,11.680,2216200,26406566.000,3.42,2.74,0.320,0.17","2022-01-21,12.080,11.820,12.080,11.760,1141400,13528362.000,2.67,-1.50,-0.180,0.09","2022-01-24,11.880,11.740,11.880,11.660,1663300,19571262.000,1.86,-0.68,-0.080,0.13","2022-01-25,11.740,11.200,11.740,11.100,3938500,44840330.000,5.45,-4.60,-0.540,0.31","2022-01-26,11.320,11.300,11.440,11.000,3958400,44182887.000,3.93,0.89,0.100,0.31","2022-01-27,11.600,10.720,11.600,10.600,1579800,17049373.000,8.85,-5.13,-0.580,0.12","2022-01-28,10.820,10.800,10.880,10.340,1775400,18887473.000,5.04,0.75,0.080,0.14","2022-01-31,10.660,10.820,10.940,10.640,295100,3205250.000,2.78,0.19,0.020,0.02","2022-02-04,11.080,11.240,11.300,10.980,678800,7576768.000,2.96,3.88,0.420,0.05","2022-02-07,11.260,11.220,11.440,11.180,2423307,27343169.000,2.31,-0.18,-0.020,0.19","2022-02-08,11.300,11.200,11.300,11.080,704500,7878375.000,1.96,-0.18,-0.020,0.06","2022-02-09,11.240,11.320,11.440,11.200,1572891,17853704.000,2.14,1.07,0.120,0.12","2022-02-10,11.460,11.600,11.620,11.460,963042,11121148.000,1.41,2.47,0.280,0.08","2022-02-11,11.580,11.520,11.660,11.460,943000,10917874.000,1.72,-0.69,-0.080,0.07","2022-02-14,11.440,11.400,11.540,11.280,1402700,16021915.000,2.26,-1.04,-0.120,0.11","2022-02-15,11.420,11.220,11.480,11.140,1114300,12533818.000,2.98,-1.58,-0.180,0.09","2022-02-16,11.240,11.300,11.440,11.240,636500,7223632.000,1.78,0.71,0.080,0.05","2022-02-17,11.400,11.260,11.440,11.180,996800,11250336.000,2.30,-0.35,-0.040,0.08","2022-02-18,11.260,11.320,11.320,11.200,827100,9317602.000,1.07,0.53,0.060,0.07","2022-02-21,11.280,11.400,11.540,11.260,969100,11075441.000,2.47,0.71,0.080,0.08","2022-02-22,11.360,11.240,11.380,11.160,828700,9311922.000,1.93,-1.40,-0.160,0.07","2022-02-23,11.260,11.660,11.800,11.180,2078600,23971562.000,5.52,3.74,0.420,0.16","2022-02-24,11.700,11.540,12.180,11.480,2440400,28769447.000,6.00,-1.03,-0.120,0.19","2022-02-25,11.540,11.920,12.240,11.540,2752800,32937634.000,6.07,3.29,0.380,0.22","2022-02-28,11.900,10.980,11.900,10.920,4288200,47887927.000,8.22,-7.89,-0.940,0.34","2022-03-01,11.000,10.880,11.200,10.800,2630900,28804296.000,3.64,-0.91,-0.100,0.21","2022-03-02,10.940,10.460,10.940,10.440,3462375,36583683.000,4.60,-3.86,-0.420,0.27","2022-03-03,10.540,10.480,10.600,10.420,2171600,22788166.000,1.72,0.19,0.020,0.17","2022-03-04,10.400,10.060,10.420,10.020,5000900,50652084.000,3.82,-4.01,-0.420,0.39","2022-03-07,9.960,9.590,10.000,9.510,6813609,66130730.000,4.87,-4.67,-0.470,0.54","2022-03-08,9.580,9.180,9.580,9.100,3248200,30304155.000,5.01,-4.28,-0.410,0.26","2022-03-09,9.180,9.380,9.430,9.030,2051006,18980401.000,4.36,2.18,0.200,0.16","2022-03-10,9.590,9.640,9.690,9.440,1134500,10877503.000,2.67,2.77,0.260,0.09","2022-03-11,9.550,9.540,9.650,9.110,1556500,14607132.000,5.60,-1.04,-0.100,0.12","2022-03-14,9.440,9.000,9.460,8.970,3289600,29942306.000,5.14,-5.66,-0.540,0.26","2022-03-15,8.820,8.410,9.040,8.360,4156398,36217206.000,7.56,-6.56,-0.590,0.33","2022-03-16,8.620,9.130,9.170,8.410,4292000,37921020.000,9.04,8.56,0.720,0.34","2022-03-17,10.120,10.020,10.120,9.540,4613600,45473313.000,6.35,9.75,0.890,0.36","2022-03-18,9.880,9.770,9.960,9.630,4764500,46576197.000,3.29,-2.50,-0.250,0.37","2022-03-21,9.840,9.750,9.960,9.710,1842943,18071942.000,2.56,-0.20,-0.020,0.14","2022-03-22,10.040,10.120,10.140,9.780,1776900,17734212.000,3.69,3.79,0.370,0.14","2022-03-23,10.240,10.460,10.660,10.240,3399160,35735610.000,4.15,3.36,0.340,0.27","2022-03-24,10.500,10.480,10.660,10.340,1569645,16492045.000,3.06,0.19,0.020,0.12","2022-03-25,10.440,10.360,10.900,10.300,2366100,24961181.000,5.73,-1.15,-0.120,0.19","2022-03-28,10.500,10.420,10.500,10.060,988300,10143712.000,4.25,0.58,0.060,0.08","2022-03-29,10.460,10.440,10.540,10.180,1117000,11541084.000,3.45,0.19,0.020,0.09","2022-03-30,10.700,10.640,10.700,10.420,1375900,14587699.000,2.68,1.92,0.200,0.11","2022-03-31,10.580,9.860,10.920,9.600,3506200,35392922.000,12.41,-7.33,-0.780,0.28","2022-04-01,9.860,9.960,9.960,9.700,653500,6433483.000,2.64,1.01,0.100,0.05","2022-04-04,9.960,10.160,10.260,9.910,1871000,18972455.000,3.51,2.01,0.200,0.15","2022-04-06,9.860,10.520,10.860,9.860,4354800,45858847.000,9.84,3.54,0.360,0.34","2022-04-07,10.520,10.100,10.560,10.100,2576300,26454600.000,4.37,-3.99,-0.420,0.20","2022-04-08,10.200,10.400,10.460,10.060,2002532,20570947.000,3.96,2.97,0.300,0.16","2022-04-11,10.400,9.880,10.400,9.870,2354700,23528780.000,5.10,-5.00,-0.520,0.19","2022-04-12,9.850,9.880,10.000,9.720,4256500,42030115.000,2.83,0.00,0.000,0.33","2022-04-13,9.840,9.900,10.000,9.810,560016,5543170.000,1.92,0.20,0.020,0.04","2022-04-14,9.880,9.890,10.000,9.760,1750269,17332250.000,2.42,-0.10,-0.010,0.14"]
cake = []
need0 = {}
for j in need:
    for i in add:
        cuts = i.split(',')
        # print(cuts)
        price = cuts[1]
        # print(cuts,cuts[1])
        # input()

        if j== cuts[0][5:].replace('-','_'):
            print(price)
            # input()
            need0[j] = need[j]+[float(price)]
            break
        else:
            need0[j] = need[j] +[0]


# print(need0,len(need))

import matplotlib.pyplot as plt
happy = []
angry = []
num0 = []
price = []
date0 = []
for i in need0:
    needd = need0[i]
    if needd[3]==0:
        continue
    # if needd[0]>3000:
    #     happy.append(1000/100)
    #
    # else:
    if needd[0]/1000>384:
        happy.append(round(needd[0] / 10000*3,2))
    else:
        happy.append(round(needd[0]/1000*3,2))
    angry.append(round(needd[1]/1000*3,2))
    num0.append(round(needd[2]/1000*10*3,2))
    price.append(round(needd[3]*10,2)),
    date0.append(i)
x = date0
y1 = price
y2 = happy
y3 = angry
y4 = num0

plt.title('舆情情绪对*st联想控股股价的影响 （2021.0707-2021.1126）')  # 折线图标题
plt.rcParams['font.sans-serif'] = ['SimHei']  # 显示汉字
plt.xlabel('日期')  # x轴标题
plt.ylabel('能级')  # y轴标题
plt.plot(x, y1, marker='o', markersize=3)  # 绘制折线图，添加数据点，设置点的大小
plt.plot(x, y2, marker='o', markersize=3)
plt.plot(x, y3, marker='o', markersize=3)
plt.plot(x, y4, marker='o', markersize=3)

for a, b in zip(x, y1):
    plt.text(a, b, b, ha='center', va='bottom', fontsize=10)  # 设置数据标签位置及大小
for a, b in zip(x, y2):
    plt.text(a, b, b, ha='center', va='bottom', fontsize=10)
for a, b in zip(x, y3):
    plt.text(a, b, b, ha='center', va='bottom', fontsize=10)
for a, b in zip(x, y4):
    plt.text(a, b, b, ha='center', va='bottom', fontsize=10)


plt.legend(['股价', '开心', '愤怒', '数量'])  # 设置折线名称
plt.xticks(rotation = 70)
plt.show()  # 显示折线图


from wordcloud import WordCloud

with open("11_18.txt" ,encoding="gbk")as file:
    #1.读取文本内容
    text=file.read()
    #2.设置词云的背景颜色、宽高、字数
    wordcloud=WordCloud(font_path="C:/Windows/Fonts/simfang.ttf",
    background_color="black",width=600,
    height=300,max_words=50).generate(text)
    #3.生成图片
    image=wordcloud.to_image()
    #4.显示图片
    image.show()



with open("11_20.txt" ,encoding="gbk")as file:
    #1.读取文本内容
    text=file.read()
    #2.设置词云的背景颜色、宽高、字数
    wordcloud=WordCloud(font_path="C:/Windows/Fonts/simfang.ttf",
    background_color="black",width=600,
    height=300,max_words=50).generate(text)
    #3.生成图片
    image=wordcloud.to_image()
    #4.显示图片
    image.show()

with open("11_25.txt" ,encoding="gbk")as file:
    #1.读取文本内容
    text=file.read()
    #2.设置词云的背景颜色、宽高、字数
    wordcloud=WordCloud(font_path="C:/Windows/Fonts/simfang.ttf",
    background_color="black",width=600,
    height=300,max_words=50).generate(text)
    #3.生成图片
    image=wordcloud.to_image()
    #4.显示图片
    image.show()
